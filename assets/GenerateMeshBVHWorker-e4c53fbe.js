import{B as R,b as Y}from"./three.module-6f29248d.js";import{M as z}from"./MeshBVH-68936e34.js";class C{constructor(l){this.name="WorkerBase",this.running=!1,this.worker=l,this.worker.onerror=d=>{throw d.message?new Error(`${this.name}: Could not create Web Worker with error "${d.message}"`):new Error(`${this.name}: Could not create Web Worker.`)}}runTask(){}generate(...l){if(this.running)throw new Error("GenerateMeshBVHWorker: Already running job.");if(this.worker===null)throw new Error("GenerateMeshBVHWorker: Worker has been disposed.");this.running=!0;const d=this.runTask(this.worker,...l);return d.finally(()=>{this.running=!1}),d}dispose(){this.worker.terminate(),this.worker=null}}const u="",V=typeof window<"u"&&window.Blob&&new Blob([atob(u)],{type:"text/javascript;charset=utf-8"});function x(){let X;try{if(X=V&&(window.URL||window.webkitURL).createObjectURL(V),!X)throw"";return new Worker(X)}catch{return new Worker("data:application/javascript;base64,"+u)}finally{X&&(window.URL||window.webkitURL).revokeObjectURL(X)}}class o extends C{constructor(){super(new x),this.name="GenerateMeshBVHWorker"}runTask(l,d,G={}){return new Promise((h,p)=>{if(d.getAttribute("position").isInterleavedBufferAttribute||d.index&&d.index.isInterleavedBufferAttribute)throw new Error("GenerateMeshBVHWorker: InterleavedBufferAttribute are not supported for the geometry attributes.");l.onerror=b=>{p(new Error(`GenerateMeshBVHWorker: ${b.message}`))},l.onmessage=b=>{const{data:c}=b;if(c.error)p(new Error(c.error)),l.onmessage=null;else if(c.serialized){const{serialized:Z,position:s}=c,y=z.deserialize(Z,d,{setIndex:!1}),a=Object.assign({setBoundingBox:!0},G);if(d.attributes.position.array=s,Z.index)if(d.index)d.index.array=Z.index;else{const K=new R(Z.index,1,!1);d.setIndex(K)}a.setBoundingBox&&(d.boundingBox=y.getBoundingBox(new Y)),G.onProgress&&G.onProgress(c.progress),h(y),l.onmessage=null}else G.onProgress&&G.onProgress(c.progress)};const m=d.index?d.index.array:null,L=d.attributes.position.array,W=[L];m&&W.push(m),l.postMessage({index:m,position:L,options:{...G,onProgress:null,includedProgressCallback:!!G.onProgress,groups:[...d.groups]}},W.map(b=>b.buffer).filter(b=>typeof SharedArrayBuffer>"u"||!(b instanceof SharedArrayBuffer)))})}}export{o as GenerateMeshBVHWorker};
